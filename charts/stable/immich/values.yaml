image:
  repository: tccr.io/truecharts/immich-server
  tag: v1.81.0@sha256:c712502f591914f9d94009e767c53ed3f12521610038f255ed5c4291117839b9
  pullPolicy: IfNotPresent
mlImage:
  repository: tccr.io/truecharts/immich-ml
  tag: v1.81.1@sha256:cf412e50583f590d6c468d10c0bb12404dea325d81d90432da1d59ab74dd616b
  pullPolicy: IfNotPresent
webImage:
  repository: tccr.io/truecharts/immich-web
  tag: v1.81.0@sha256:712b25c033b50529082a20cb391d248a7a2fccdcee48fe15c180b41118102929
  pullPolicy: IfNotPresent
proxyImage:
  repository: tccr.io/truecharts/immich-proxy
  tag: v1.81.1@sha256:feb275bd3559407535833e86a3fb510603021af473bd04b6ccb14bac35a87422
  pullPolicy: IfNotPresent
typesenseImage:
  repository: tccr.io/truecharts/immich-typesense
  tag: v0.25.1@sha256:878fa58e17f9ba6223d07530d03139b647300bd2ea185124688b731e3349d705
  pullPolicy: IfNotPresent

securityContext:
  container:
    readOnlyRootFilesystem: false
    runAsNonRoot: false
    runAsUser: 0
    runAsGroup: 0

immich:
  enable_ml: true
  enable_typesense: true
  public_login_page_message: Immich
  log_level: log

service:
  main:
    # Main service targets the proxy
    targetSelector: proxy
    ports:
      main:
        port: 10323
        protocol: http
        targetSelector: proxy
        targetPort: 8080
  server:
    enabled: true
    type: ClusterIP
    # Server is the main container
    targetSelector: main
    ports:
      server:
        enabled: true
        primary: true
        port: 10001
        protocol: http
        targetSelector: main
  web:
    enabled: true
    type: ClusterIP
    targetSelector: web
    ports:
      web:
        enabled: true
        primary: true
        port: 10000
        protocol: http
        targetSelector: web
  microservices:
    enabled: true
    type: ClusterIP
    targetSelector: microservices
    ports:
      microservices:
        enabled: true
        primary: true
        port: 10004
        protocol: http
        targetSelector: microservices
  machinelearning:
    enabled: true
    type: ClusterIP
    targetSelector: machinelearning
    ports:
      machinelearning:
        enabled: true
        primary: true
        port: 10003
        protocol: http
        targetSelector: machinelearning
  typesense:
    enabled: true
    type: ClusterIP
    targetSelector: typesense
    ports:
      typesense:
        enabled: true
        primary: true
        port: 10002
        protocol: http
        targetSelector: typesense

persistence:
  mlcache:
    enabled: true
    type: emptyDir
    targetSelector:
      machinelearning:
        machinelearning:
          mountPath: /mlcache
  microcache:
    enabled: true
    type: emptyDir
    targetSelector:
      microservices:
        microservices:
          mountPath: /microcache
  typesense:
    enabled: true
    type: emptyDir
    targetSelector:
      typesense:
        typesense:
          mountPath: /typesensedata
  library:
    enabled: true
    mountPath: /usr/src/app/upload/library
    targetSelector:
      # Main pod/container is server
      main:
        main: {}
      microservices:
        microservices: {}
  uploads:
    enabled: true
    mountPath: /usr/src/app/upload/upload
    targetSelector:
      # Main pod/container is server
      main:
        main: {}
      microservices:
        microservices: {}
  thumbs:
    enabled: true
    mountPath: /usr/src/app/upload/thumbs
    targetSelector:
      # Main pod/container is server
      main:
        main: {}
      microservices:
        microservices: {}
  profile:
    enabled: true
    mountPath: /usr/src/app/upload/profile
    targetSelector:
      # Main pod/container is server
      main:
        main: {}
      microservices:
        microservices: {}
  video:
    enabled: true
    mountPath: /usr/src/app/upload/encoded-video
    targetSelector:
      # Main pod/container is server
      main:
        main: {}
      microservices:
        microservices: {}
  externallibrary:
    enabled: true
    mountPath: /media
    targetSelector:
      # Main pod/container is server
      main:
        main: {}
      microservices:
        microservices: {}

cnpg:
  main:
    enabled: true
    user: immich
    database: immich

redis:
  enabled: true
  redisUsername: default

portal:
  open:
    enabled: true
