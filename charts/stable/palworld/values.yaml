image:
  repository: ghcr.io/ich777/steamcmd
  pullPolicy: IfNotPresent
  tag: palworld@sha256:e1ba071929359d54b1a9e139f62d90f30ff0ab9fce1d2093d28f9bd82dbe9913

securityContext:
  container:
    readOnlyRootFilesystem: false
    runAsUser: 0
    runAsGroup: 0

service:
  main:
    ports:
      main:
        protocol: udp
        port: 8211
  rcon:
    enabled: true
    ports:
      rcon:
        enabled: true
        protocol: tcp
        port: 25575

palworld:
  steam:
    id: "2394010"
    username: ""
    password: ""
    validate: false
  update_public_ip: ""
  game:
    PublicPort: "{{ .Values.service.main.ports.main.port }}"
    RCONPort: "{{ .Values.service.rcon.ports.rcon.port }}"
    ServerName: "TrueCharts Palworld Server"
    ServerDescription: "A Palworld Server running in Kubernetes"
    ServerPassword: ""
    AdminPassword: "TrueChartsIsAHelmProject"
    RCONEnabled: "True"
    bUseAuth: true
  params:
    - -publiclobby
  params_extra:
    - -useperfthreads
    - -NoAsyncLoadingThread
    - -UseMultithreadForDS
  backup:
    enabled: true
    interval: 120
    to_keep: 12

workload:
  main:
    podSpec:
      initContainers:
        update-config-ini:
          enabled: true
          type: init
          imageSelector: "image"
          command:
            - /bin/sh
            - -c
          args:
            - |
                echo updating ini values....
                serverfiles={{ .Values.persistence.serverfiles.targetSelector.main.main.mountPath }}
                echo ${serverfiles}
                game_values={{ .Values.palworld.game }}
                echo ${game_values}

                config="${serverfiles}/Pal/Saved/Config/LinuxServer"
                cfgFile="${config}/PalWorldSettings.ini"
                dfCfgFile="${serverfiles}/DefaultPalWorldSettings.ini"

                mkdir -p "${config}"
                if [ ! -f "${cfgFile}" ]; then
                    if [ -f "${dfCfgFile}" ]; then
                        echo "Default config file found, copying as cfgFile..."
                        cp "${dfCfgFile}" "${cfgFile}"
                    else
                        echo "Config file not found, fetching..."
                        wget -qO "${cfgFile}" https://github.com/ich777/docker-steamcmd-server/raw/palworld/config/PalWorldSettings.ini
                    fi
                fi

                set_ini() {
                    local key="$1"
                    local value="$2"
                    local flags=""

                    shift 2
                    for arg in "$@"; do
                        flags="$flags $arg"
                    done

                    if ! grep -q 'OptionSettings=(' "$cfgFile"; then
                        echo "OptionSettings section not found in '${cfgFile}'. Skipping..."
                        return
                    fi

                    if ! grep -q "${key}=" "$cfgFile"; then
                        echo "Key '${key}' does not exist in the OptionSettings section of '${cfgFile}'. Skipping..."
                        return
                    fi

                    for flag in $flags; do
                        case $flag in
                            -q) value="\"$value\"" ;;
                            -b) value="$(echo "$value" | tr '[:upper:]' '[:lower:]' | sed 's/true/True/; s/false/False/')" ;;
                            *) echo "Unknown flag: $flag. Skipping..." ;;
                        esac
                    done

                    sed -i "/OptionSettings=(/ {
                        :loop
                        /)$/! {
                            N
                            b loop
                        }
                        s|\(${key}=\)[^,]*|\1${value}|
                    }" "${cfgFile}"

                    if ! grep -q ')$' "${cfgFile}"; then
                        sed -i "\|OptionSettings=(| s|$|)|" "${cfgFile}"
                    fi

                    echo "Set ${key} to ${value}"
                }

                # Convert YAML to key-value pairs using yq
                if [[ -n "$game_values" ]]; then
                    eval "game_values=$(yq eval -o=json "${game_values}" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"')"
                fi

                # Loop over game_values and set each key-value pair
                IFS=$'\n' # Use newline as delimiter
                for pair in $game_values; do
                    IFS='=' read -r key value <<< "$pair"
                    if [[ "$value" == "true" || "$value" == "false" ]]; then
                        set_ini "$key" "$value" -b
                    else
                        set_ini "$key" "$value" -q
                    fi
                done

                echo "Done!"
      containers:
        main:
          probes:
            liveness:
              type: tcp
              port: "{{ .Values.service.rcon.ports.rcon.port }}"
            readiness:
              type: tcp
              port: "{{ .Values.service.rcon.ports.rcon.port }}"
            startup:
              type: tcp
              port: "{{ .Values.service.rcon.ports.rcon.port }}"
          env:
            # paths
            STEAMCMD_DIR: "{{ .Values.persistence.steamcmd.mountPath }}"
            SERVER_DIR: "{{ .Values.persistence.serverfiles.targetSelector.main.main.mountPath }}"
            # steam
            GAME_ID: "{{ .Values.palworld.steam.id }}"
            USERNAME: "{{ .Values.palworld.steam.username }}"
            PASSWRD: "{{ .Values.palworld.steam.password }}"
            VALIDATE: "{{ .Values.palworld.steam.validate }}"
            # game
            SRV_ADMIN_PWD: "{{ .Values.palworld.game.AdminPassword }}"
            UPDATE_PUBLIC_IP: "{{ .Values.palworld.update_public_ip }}"
            GAME_PARAMS: '{{ printf "-port=%v -publicport=%v -rconport=%v %s" .Values.service.main.ports.main.port .Values.service.main.ports.main.port .Values.service.rcon.ports.rcon.port (join " " .Values.palworld.params) }}'
            GAME_PARAMS_EXTRA: '{{ join " " .Values.palworld.params_extra }}'
            # backup
            BACKUP: "{{ .Values.palworld.backup.enabled }}"
            BACKUP_INTERVAL: "{{ .Values.palworld.backup.interval }}"
            BACKUP_TO_KEEP: "{{ .Values.palworld.backup.to_keep }}"

persistence:
  steamcmd:
    enabled: true
    mountPath: /serverdata/steamcmd
  serverfiles:
    enabled: true
    targetSelector:
      main:
        main:
          mountPath: /serverdata/serverfiles
        update-config-ini:
          mountPath: /serverdata/serverfiles

portal:
  open:
    enabled: false
