hostNetwork: true
image:
  pullPolicy: IfNotPresent
  repository: jokobsk/pi.alert
  tag: latest@sha256:7d88edb76d412162b3a743f6c4667c27d804c59f8f31cd229867750e89d5841c
initContainers:
  init:
    args:
      - |
        dark_file="/home/pi/pialert/db/setting_darkmode"
        temp_config_file="/tc-pialert.conf"
        config_file="/home/pi/pialert/config/pialert.conf"
        echo "Copying config file into it's directory.."
        cp -f "$temp_config_file" "$config_file" && echo "Copied config file successfully!" || echo "Failed to copy config file..."
        {{- if .Values.pialert.general.dark_mode }}
        echo "Enabling dark mode file..."
        touch "$dark_file" && echo "Created dark mode file!" || echo "Failed to create dark mode file..."
        {{- else }}
        if [ -f "$dark_file" ]; then
          rm -f $dark_file && echo "Dark mode file removed!" || echo "Failed to remove dark mode file..."
        else
          echo "Dark mode file does not exist, no action is needed."
        fi
        {{- end }}
    command:
      - /bin/sh
      - -c
    image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
    volumeMounts:
      - mountPath: /home/pi/pialert/db
        name: db
      - mountPath: /home/pi/pialert/config
        name: config
      - mountPath: /tc-pialert.conf
        name: pialert-config
        subPath: pialert.conf
persistence:
  config:
    enabled: true
    mountPath: /home/pi/pialert/config
  db:
    enabled: true
    mountPath: /home/pi/pialert/db
  pialert-config:
    enabled: true
    noMount: true
    objectName: pialert-secret
    type: secret
pialert:
  apprise:
    enabled: false
    host: ""
    url: ""
  dyndns:
    domain: ""
    enabled: false
    password: ""
    update_url: ""
    user: ""
  email:
    enabled: false
    password: ""
    port: 587
    report_from: ""
    report_to: ""
    server: ""
    skip_login: false
    skip_tls: false
    user: ""
  general:
    dark_mode: true
    days_to_keep_events: 90
    included_sections: []
    print_log: false
    report_dashboard_url: http://localhost
    scan_cycle_minutes: 5
    scan_subnets: []
    web_password: ""
    web_protection: false
  mqtt:
    broker: ""
    delay_sec: 2
    enabled: false
    password: ""
    port: 1883
    qos: 0
    user: ""
  ntfy:
    enabled: false
    host: ""
    password: ""
    topic: ""
    user: ""
  pholus:
    days_data: 7
    enabled: false
    force: false
    run: once
    run_schedule: 0 4 * * *
    run_timeout: 300
    timeout: 20
  pihole:
    dhcp_active: false
    pihole_active: false
  pushsafer:
    enabled: false
    token: ""
  webhook:
    enabled: false
    method: GET
    payload: json
    url: ""
portal:
  open:
    enabled: true
securityContext:
  container:
    readOnlyRootFilesystem: false
    runAsGroup: 0
    runAsUser: 0
service:
  main:
    ports:
      main:
        port: 10600
        protocol: http
workload:
  main:
    podSpec:
      containers:
        main:
          env:
            HOST_USER_GID: "{{ .Values.securityContext.pod.fsGroup }}"
            HOST_USER_ID: "{{ .Values.securityContext.container.runAsUser }}"
            PORT: "{{ .Values.service.main.ports.main.port }}"
