# Include{groups}
portals:
  open:
# Include{portalLink}
questions:
# Include{global}
# Include{workload}
# Include{workloadDeployment}
# Include{replicas1}
# Include{podSpec}
# Include{containerMain}
# Include{containerBasic}
# Include{containerAdvanced}
# Include{containerConfig}
# Include{podOptions}
  - variable: livebook
    group: App Configuration
    label: Livebook
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: password
          label: "Password (LIVEBOOK_PASSWORD)"
          description: Password needed to access livebook (must be at least 12 characters)
          schema:
            type: string
            min_length: 12
            required: true
            private: true
        - variable: debug
          label: "Debug Logging (LIVEBOOK_DEBUG)"
          description: >
            Enables verbose logging, when set to "true". Disabled by default.
          schema:
            type: boolean
            default: false
        - variable: updateInstructionsUrl
          label: "Update instruction URL (LIVEBOOK_UPDATE_INSTRUCTIONS_URL)"
          description: >
            Sets the URL to direct the user to for updating Livebook when a new version becomes available.
          schema:
            type: string
        - variable: awsCredentials
          label: AWS Credentials
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: enabled
                label: "Set AWS Credentials"
                description: >
                  Enable Livebook to read AWS Credentials from environment variables,
                  AWS Credentials, EC2/ECS metadata when configuring S3 buckets.
                schema:
                  type: boolean
                  default: false
                  show_subquestions_if: true
                  subquestions:
                    - variable: accessKeyId
                      label: "AWS Access Key ID"
                      description: >
                        AWS Access Key ID in case you want to configure AWS S3 Storage inside Livebook
                      schema:
                        type: string
                    - variable: secretAccessKey
                      label: "AWS Secret Access Key"
                      description: >
                        AWS Secret Access Key in case you want to configure AWS S3 Storage inside Livebook
                      schema:
                        type: string
                        private: true
# Include{serviceRoot}
        - variable: main
          label: "Main Service"
          description: "The Primary service on which the healthcheck runs, often the webUI"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{serviceSelectorLoadBalancer}
# Include{serviceSelectorExtras}
                    - variable: main
                      label: "Main Service Port Configuration"
                      schema:
                        additional_attrs: true
                        type: dict
                        attrs:
                          - variable: port
                            label: "Port"
                            description: "This port exposes the container port on the service"
                            schema:
                              type: int
                              default: 8787
                              required: true
# Include{serviceExpertRoot}
# Include{serviceExpert}
# Include{serviceList}
# Include{persistenceRoot}
        - variable: data
          label: "data Storage"
          description: "Where livebook will save notebooks"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{persistenceBasic}
# Include{persistenceList}
# Include{ingressRoot}
        - variable: main
          label: "Main Ingress"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{ingressDefault}
# Include{ingressAdvanced}
# Include{ingressList}
# Include{securityContextRoot}
              - variable: runAsUser
                label: "runAsUser"
                description: "The UserID of the user running the application"
                schema:
                  type: int
                  default: 568
              - variable: runAsGroup
                label: "runAsGroup"
                description: "The groupID of the user running the application"
                schema:
                  type: int
                  default: 568
# Include{securityContextContainer}
# Include{securityContextAdvanced}
# Include{securityContextPod}
              - variable: fsGroup
                label: "fsGroup"
                description: "The group that should own ALL storage."
                schema:
                  type: int
                  default: 568
# Include{resources}
# Include{advanced}
# Include{addons}
# Include{codeserver}
# Include{netshoot}
# Include{vpn}
# Include{documentation}
