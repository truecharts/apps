additionalContainers:
  nginx:
    image: "{{ .Values.nginxImage.repository }}:{{ .Values.nginxImage.tag }}"
    name: nginx
    ports:
      - containerPort: 80
        name: main
    volumeMounts:
      - mountPath: /etc/nginx/nginx.conf
        name: recipes-config
        readOnly: true
        subPath: nginx-config
      - mountPath: /media
        name: media
      - mountPath: /static
        name: static
configmap:
  config:
    data:
      nginx-config: |-
        events {
          worker_connections 1024;
        }
        http {
          include /etc/nginx/mime.types;
          server {
            listen 80;
            server_name _;
            client_max_body_size 16M;
            # serve media files
            location /media/ {
              alias /media/;
            }
            # serve static files
            location /static/ {
              alias /static/;
            }
            # pass requests for dynamic content to gunicorn
            location / {
              proxy_set_header Host $http_host;
              proxy_pass http://localhost:8080;
              proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            }
          }
        }
    enabled: true
image:
  pullPolicy: IfNotPresent
  repository: vabene1111/recipes
  tag: 1.5.6@sha256:5c9a304e42aac1f02ac1387f7183473eeeabc091635524587d158f78c8426f68
nginxImage:
  repository: nginx
  tag: 1.25.3@sha256:86e53c4c16a6a276b204b0fd3a8143d86547c967dc8258b3d47c3a21bb68d3c6
persistence:
  media:
    enabled: true
    mountPath: /opt/recipes/mediafiles
  recipes-config:
    enabled: "true"
    mountPath: /etc/nginx/nginx.conf
    subPath: nginx.conf
    type: custom
    volumeSpec:
      configMap:
        name: '{{ printf "%v-config" (include "tc.common.names.fullname" .) }}'
  static:
    enabled: true
    mountPath: /opt/recipes/staticfiles
    type: emptyDir
portal:
  enabled: true
postgresql:
  enabled: true
  existingSecret: dbcreds
  postgresqlDatabase: recipes
  postgresqlUsername: recipes
securityContext:
  container:
    readOnlyRootFilesystem: false
    runAsGroup: 0
    runAsNonRoot: false
    runAsUser: 0
service:
  main:
    ports:
      main:
        port: 10029
        targetPort: 80
workload:
  main:
    podSpec:
      containers:
        main:
          env:
            ALLOWED_HOSTS: "*"
            COMMENT_PREF_DEFAULT: 1
            CSRF_TRUSTED_ORIGINS: ""
            DB_ENGINE: django.db.backends.postgresql
            DEBUG: 0
            FRACTION_PREF_DEFAULT: 0
            GUNICORN_MEDIA: 0
            POSTGRES_DB: "{{ .Values.postgresql.postgresqlDatabase }}"
            POSTGRES_HOST:
              secretKeyRef:
                key: plainhost
                name: dbcreds
            POSTGRES_PASSWORD:
              secretKeyRef:
                key: postgresql-password
                name: dbcreds
            POSTGRES_PORT: "5432"
            POSTGRES_USER: "{{ .Values.postgresql.postgresqlUsername }}"
            SECRET_KEY:
              secretKeyRef:
                key: SECRET_KEY
                name: recipes-secrets
            SHOPPING_MIN_AUTOSYNC_INTERVAL: 5
            TIMEZONE: "{{ .Values.TZ }}"
