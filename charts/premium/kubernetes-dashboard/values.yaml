image:
  repository: kubernetesui/dashboard-web
  pullPolicy: IfNotPresent
  tag: 1.4.0

authImage:
  repository: docker.io/kubernetesui/dashboard-auth
  pullPolicy: IfNotPresent
  tag: 1.1.3

apiImage:
  repository: kubernetesui/dashboard-api
  pullPolicy: IfNotPresent
  tag: 1.7.0

scraperImage:
  repository: kubernetesui/dashboard-metrics-scraper
  pullPolicy: IfNotPresent
  tag: 1.1.1.1

service:
  main:
    ports:
      main:
        port: 443
        targetPort: 8443
        protocol: https

workload:
  main:
    enabled: true
    podSpec:
      containers:
        main:
          enabled: true
          args:
            - --namespace={{ .Release.Namespace }}
            - --metrics-scraper-service-name=todo
            # GOMAXPROCS:
            #     resourceFieldRef:
            #       resource: limits.cpu
            #GOMEMLIMIT:
            #  valueFrom:
            #    resourceFieldRef:
            #      resource: limits.memory
        api:
          enabled: true
          imageSelector: apiImage
          args:
            - --namespace={{ .Release.Namespace }}
            - --metrics-scraper-service-name=todo
          env:
            CSRF_KEY:
              secretKeyRef:
                name: csrf
                key: private.key

            # GOMAXPROCS:
            #     resourceFieldRef:
            #       resource: limits.cpu
            #GOMEMLIMIT:
            #  valueFrom:
            #    resourceFieldRef:
            #      resource: limits.memory

          probes:
            liveness:
              enabled: false
            readiness:
              enabled: false
            startup:
              enabled: false

        auth:
          enabled: true
          imageSelector: authImage
          env:
            CSRF_KEY:
              secretKeyRef:
                name: csrf
                key: private.key

            # GOMAXPROCS:
            #     resourceFieldRef:
            #       resource: limits.cpu
            #GOMEMLIMIT:
            #  valueFrom:
            #    resourceFieldRef:
            #      resource: limits.memory

          probes:
            liveness:
              enabled: false
            readiness:
              enabled: false
            startup:
              enabled: false

        scraper:
          enabled: true
          imageSelector: scraperImage
          env:
            CSRF_KEY:
              secretKeyRef:
                name: csrf
                key: private.key

            # GOMAXPROCS:
            #     resourceFieldRef:
            #       resource: limits.cpu
            #GOMEMLIMIT:
            #  valueFrom:
            #    resourceFieldRef:
            #      resource: limits.memory
          probes:
            liveness:
              enabled: false
              type: http
              port: 8000
            readiness:
              enabled: false
              type: http
              port: 8000
            startup:
              enabled: false
              type: http
              port: 8000

podOptions:
  automountServiceAccountToken: true

persistence:
  kubernetes-dashboard-certs:
    enabled: true
    type: secret
    objectName: kubernetes-dashboard-certs
    expandObjectName: false
    mountPath: /certs

configmap:
  kubernetes-dashboard-settings:
    enabled: true
    expandObjectName: false
    data:
      _global: '{"itemsPerPage":100}'

secret:
  csrf:
    enabled: true
    data: 
      private.key: "{{ randBytes 256 | b64enc | quote }}"

portal:
  open:
    enabled: true

rbac:
  main:
    enabled: true
    primary: true
    clusterWide: true
    rules:
      - apiGroups: [""]
        resources: ["secrets"]
        resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs", "kubernetes-dashboard-csrf"]
        verbs: ["get", "update", "delete"]
        # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
      - apiGroups: [""]
        resources: ["configmaps"]
        resourceNames: ["kubernetes-dashboard-settings"]
        verbs: ["get", "update"]
        # Allow Dashboard to get metrics.
      - apiGroups: [""]
        resources: ["services"]
        resourceNames: ["heapster", "dashboard-metrics-scraper"]
        verbs: ["proxy"]
      - apiGroups: [""]
        resources: ["services/proxy"]
        resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
        verbs: ["get"]
      - apiGroups: ["metrics.k8s.io"]
        resources: ["pods", "nodes"]
        verbs: ["get", "list", "watch"]
      # Give all-access
      - apiGroups: ["*"]
        resources: ["*"]
        verbs: ["*"]

# -- The service account the pods will use to interact with the Kubernetes API
serviceAccount:
  main:
    enabled: true
    primary: true
    targetSelectAll: true
